import os
import sqlite3

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from NaC_Bot import start_game_with_bot, set_difficulty, process_move_bot
from NaC_Friend import start_game_with_friend, process_move_friend


load_dotenv()

bot = Bot(os.getenv("TOKEN_BOT"))
dp = Dispatcher(bot)

db = sqlite3.connect("NaCGame.db")
cursor = db.cursor()


@dp.message_handler(commands=["start"])
async def greeting_message(message: types.Message):
    await registration(message)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥

    # –±–µ—Ä—ë–º username –±–æ—Ç–∞
    bot_user = await message.bot.get_me()
    bot_username = bot_user.username

    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ë–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É", url=f"https://t.me/{bot_username}?startgroup=true"))

    if message.chat.type == "private":  # –ª—Å
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
            "–≠—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—Å —Å –±–æ—Ç–æ–º",
            reply_markup=kb
        )
    else:  # –≤ –≥—Ä—É–ø–ø–µ
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç!\n"
            "–≠—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ",
        )


@dp.message_handler(commands=['leaderboard'])
async def get_users_score(message: types.Message):
    await registration(message)

    leaders_list = [i for i in cursor.execute("SELECT * FROM users ORDER BY score DESC")]

    leaderboard_text = f"–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n"  # –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –≤ —Ç–æ–ø–µ, —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –µ—â—ë –ø–æ–º–µ–Ω—è—Ç—å —Å—Ä–µ–∑
    current_rank = 0
    prev_score = None
    user_score = 0
    user_rank = 0
    top_10 = []

    for i, player in enumerate(leaders_list, start=1):
        if player[3] != prev_score:
            current_rank += 1
            prev_score = player[3]
        top_10.append([current_rank, player[1], player[3]])  # –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ, –∏–º—è, –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤

        if player[0] == message.from_user.id:  # –µ—Å–ª–∏ –∏–≥—Ä–æ–∫, –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–º–∞–Ω–¥—É, –µ—Å—Ç—å –≤ —Ç–æ–ø–µ
            user_score = player[3]
            user_rank = current_rank

    for player in top_10[:10]:  # –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –Ω–µ –∏–∑ —Ç–æ–ø–∞
        leaderboard_text += f"{player[0]}. {player[1]} ‚Äî {player[2]} ü™ô\n"  # –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ, –∏–º—è, –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤

    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞, –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –∫–æ–º–∞–Ω–¥—É
    leaderboard_text += f"\n–í–∞—à —Å—á—ë—Ç:\n{user_rank}. {message.from_user.full_name} ‚Äî {user_score} ü™ô"

    await message.answer(leaderboard_text)


@dp.message_handler(commands=['game_with_friend'])
async def game_with_friend(message: types.Message):
    await registration(message)
    await start_game_with_friend(message)


@dp.message_handler(commands=['game_with_bot'])
async def game_with_bot(message: types.Message):
    await registration(message)
    await start_game_with_bot(message)


async def registration(message: types.Message):
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = f"@{message.from_user.username}"

    # –∏—â–µ–º —á–µ–ª–æ–≤–µ–∫–∞ –≤ –±–¥ –ø–æ –∏–º–µ–Ω–∏ –∏/–∏–ª–∏ –ø–æ username
    info_id = cursor.execute("SELECT * FROM users WHERE id=?", (user_id, )).fetchone()
    info_username = (
        cursor.execute("SELECT * FROM users WHERE username=?", (username,)).fetchone()
        if username != "@None" else None
    )

    if info_id is None and info_username is None:  # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–¥
        user_data = (user_id, full_name, username, 0)
        cursor.execute("INSERT INTO users (id, full_name, username, score) VALUES (?, ?, ?, ?)", user_data)
        db.commit()
    else:  # –µ—Å–ª–∏ —Ç–∞–∫–æ–π —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã
        if info_id is not None:
            if info_id[1] != full_name:
                cursor.execute("UPDATE users SET full_name=? WHERE id=?", (full_name, user_id, ))
                db.commit()
            if info_id[2] != username:
                cursor.execute("UPDATE users SET username=? WHERE id=?", (username, user_id, ))
                db.commit()


@dp.callback_query_handler(lambda c: c.data.startswith("difficulty_"))
async def set_difficulty_bot(callback: types.CallbackQuery):
    await set_difficulty(callback)


@dp.callback_query_handler(lambda c: c.data.startswith("bot_"))
async def process_bot_move(callback: types.CallbackQuery):
    await process_move_bot(callback)


@dp.callback_query_handler(lambda c: c.data.startswith("friend_"))
async def process_friend_move(callback: types.CallbackQuery):
    await process_move_friend(callback)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
